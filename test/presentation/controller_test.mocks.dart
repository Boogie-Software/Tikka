// Mocks generated by Mockito 5.4.5 from annotations
// in tikka/test/tikka/presentation/controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:tikka/presentation/view_state.dart' as _i1;
import 'package:tikka/presentation/view_state_observer.dart' as _i3;

import 'controller_test.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeViewStateObserver_0<S extends _i1.ViewState> extends _i2.SmartFake
    implements _i3.ViewStateObserver<S> {
  _FakeViewStateObserver_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTestViewState_1 extends _i2.SmartFake implements _i4.TestViewState {
  _FakeTestViewState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TestPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestPresenter extends _i2.Mock implements _i4.TestPresenter {
  MockTestPresenter() {
    _i2.throwOnMissingStub(this);
  }

  @override
  bool get isViewActive =>
      (super.noSuchMethod(Invocation.getter(#isViewActive), returnValue: false)
          as bool);

  @override
  set isViewActive(bool? _isViewActive) => super.noSuchMethod(
    Invocation.setter(#isViewActive, _isViewActive),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ViewStateObserver<_i4.TestViewState> get viewStateObserver =>
      (super.noSuchMethod(
            Invocation.getter(#viewStateObserver),
            returnValue: _FakeViewStateObserver_0<_i4.TestViewState>(
              this,
              Invocation.getter(#viewStateObserver),
            ),
          )
          as _i3.ViewStateObserver<_i4.TestViewState>);

  @override
  set viewStateObserver(
    _i3.ViewStateObserver<_i4.TestViewState>? _viewStateObserver,
  ) => super.noSuchMethod(
    Invocation.setter(#viewStateObserver, _viewStateObserver),
    returnValueForMissingStub: null,
  );

  @override
  _i4.TestViewState get viewState =>
      (super.noSuchMethod(
            Invocation.getter(#viewState),
            returnValue: _FakeTestViewState_1(
              this,
              Invocation.getter(#viewState),
            ),
          )
          as _i4.TestViewState);

  @override
  void onViewEvent(_i4.TestViewEvent? event) => super.noSuchMethod(
    Invocation.method(#onViewEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i4.TestViewState? viewState) => super.noSuchMethod(
    Invocation.method(#emit, [viewState]),
    returnValueForMissingStub: null,
  );

  @override
  T get<T>({String? dependencyName = ''}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [], {#dependencyName: dependencyName}),
            returnValue: _i5.dummyValue<T>(
              this,
              Invocation.method(#get, [], {#dependencyName: dependencyName}),
            ),
          )
          as T);
}
